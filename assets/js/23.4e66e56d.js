(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{340:function(n,t,e){"use strict";e.r(t);var a=e(7),r=Object(a.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[n._v("#")]),n._v(" 介绍")]),n._v(" "),t("p",[n._v("nn.Sequential是PyTorch中的一个序列容器，用于搭建神经网络的模块被按照被传入构造器的顺序添加到nn.Sequential()容器中。\n除此之外，一个包含神经网络模块的OrderedDict也可以被传入nn.Sequential()容器中。\n利用nn.Sequential()搭建好模型架构，模型前向传播时调用forward()方法，模型接收的输入首先被传入nn.Sequential()包含的第一个网络模块中。\n然后，第一个网络模块的输出传入第二个网络模块作为输入，按照顺序依次计算并传播，直到nn.Sequential()里的最后一个模块输出结果。")]),n._v(" "),t("h2",{attrs:{id:"作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[n._v("#")]),n._v(" 作用")]),n._v(" "),t("p",[n._v("将整个容器视为单个模块，相当于把多个模块封装成一个模块，forward()方法接受输入之后，nn.Sequential()按照内部模块的顺序自动依次计算并输出结果")])])}),[],!1,null,null,null);t.default=r.exports}}]);